{
  "version": 3,
  "sources": ["../../node_modules/@randajan/simple-lib/src/logger.js", "../../node_modules/@randajan/simple-lib/src/info/index.js", "../../node_modules/@randajan/simple-lib/src/node/index.js", "../../src/class/Server.js", "../../src/tools.js", "../../src/validations/prune.js", "../../src/class/Route.js", "../../src/methods/resolvers/collections.js", "../../src/methods/resolvers/count.js", "../../src/methods/resolvers/query.js", "../../src/methods/resolvers/insert.js", "../../src/methods/resolvers/metadata.js", "../../src/methods/resolvers/remove.js", "../../src/methods/resolvers/update.js", "../../dist/import-glob:./resolvers/**", "../../src/methods/index.js", "../../src/class/Context.js", "../../src/validations/options.js", "../../src/index.js", "../../src/adapter/mongo.js", "../src/index.js"],
  "sourcesContent": ["import chalkNative from \"chalk\";\r\n\r\nconst chalkProps = Object.getOwnPropertyNames(Object.getPrototypeOf(chalkNative)).filter(v=>v!==\"constructor\");\r\n\r\nclass Logger extends Function {\r\n    constructor(formater, chalkInit) {\r\n        super();\r\n        const chalk = chalkInit||chalkNative;\r\n\r\n        const log = (...msgs)=>{ console.log(chalk(formater(msgs))); }\r\n        const self = Object.setPrototypeOf(log.bind(), new.target.prototype);\r\n\r\n        for (const prop of chalkProps) {\r\n            Object.defineProperty(self, prop, { get: _=>new Logger(formater, chalk[prop]), enumerable:false });\r\n        }\r\n        \r\n        return self;\r\n    }\r\n}\r\n\r\nexport const logger = (...prefixes)=>{\r\n    const now = _=>(new Date()).toLocaleTimeString(\"cs-CZ\");\r\n    prefixes = prefixes.filter(v=>!!v).join(\" \");\r\n\r\n    return new Logger(msgs=>`${prefixes} | ${now()} | ${msgs.join(\" \")}`);\r\n}", "const enumerable = true;\r\nconst lockObject = o=>{\r\n    if (typeof o !== \"object\") { return o; }\r\n\r\n    const r = {};\r\n    for (const i in o) {\r\n        const descriptor = { enumerable };\r\n        let val = o[i];\r\n        if (val instanceof Array) { descriptor.get = _=>[...val]; }\r\n        else { descriptor.value = lockObject(val); }\r\n        Object.defineProperty(r, i, descriptor);\r\n    }\r\n\r\n    return r;\r\n}\r\n\r\nexport const info = lockObject(__slib_info);\r\nexport default info;", "import { parentPort } from \"worker_threads\";\r\nimport { info } from \"../info\";\r\nimport { logger } from \"../logger\";\r\n\r\nexport default info;\r\n\r\nexport const log = logger(info.name, info.version, info.env);\r\n\r\nexport {\r\n    info,\r\n}\r\n\r\nparentPort.on(\"message\", msg=>{\r\n    if (msg===\"shutdown\") { process.exit(0); }\r\n});\r\n\r\nprocess.on('uncaughtException', e=>{\r\n  console.log(e.stack);\r\n});", "import { Buffer } from \"safe-buffer\";\r\nimport jet from \"@randajan/jet-core\";\r\n\r\nimport { escapeRegExp, vault } from \"../tools\";\r\n\r\nimport { prune } from '../validations/prune.js';\r\nimport { Route } from \"./Route\";\r\n\r\nimport methods from \"../methods\";\r\nimport { Context } from \"./Context\";\r\n\r\nconst { query, insert, update, remove, collections, metadata, count } = methods;\r\n\r\n\r\nconst { solid, virtual } = jet.prop;\r\n\r\nexport class Server {\r\n  constructor(config={}) {\r\n\r\n    const { url, model, cors, resolver } = config;\r\n\r\n    const [ uid, _p ] = vault.set({\r\n      url,\r\n      model,\r\n      cors,\r\n      routes:{},\r\n      resolver\r\n    });\r\n\r\n    solid.all(this, {\r\n      uid\r\n    }, false);\r\n\r\n    virtual.all(this, {\r\n      url:_=>_p.url,\r\n      model:_=>_p.model\r\n    });\r\n\r\n    this.addRoute(\"get\", '/', collections);\r\n    this.addRoute(\"get\", '/\\$metadata', metadata);\r\n\r\n    this.addRoute(\"get\", '/:collection/\\$count', count);\r\n    this.addRoute(\"get\", '/:collection\\\\(:id\\\\)', query);\r\n    this.addRoute(\"get\", '/:collection', query);\r\n\r\n    this.addRoute(\"patch\", '/:collection\\\\(:id\\\\)', update);\r\n    this.addRoute(\"delete\", '/:collection\\\\(:id\\\\)', remove);\r\n    this.addRoute(\"post\", '/:collection', insert);\r\n\r\n    if (cors) { this.addRoute(\"options\", '/(.*)', ()=>{}); }\r\n\r\n  }\r\n\r\n  addRoute(method, path, resolver) {\r\n    const { routes } = vault.get(this.uid);\r\n    const list = routes[method] || (routes[method] = []);\r\n    const route = new Route(method, path, resolver);\r\n    list.push(route);\r\n    return route;\r\n  }\r\n\r\n  findRoute(method, path) {\r\n    const _p = vault.get(this.uid);\r\n    const routes = _p.routes[method] || [];\r\n\r\n    for (const route of routes) {\r\n      if (route.test(path)) { return route; }\r\n    }\r\n\r\n    throw { code: 404, msg: \"Not found\" };\r\n  }\r\n\r\n  findEntity(name) {\r\n    const { namespace, entitySets, entityTypes } = this.model;\r\n    const es = entitySets[name];\r\n    const est = es ? es.entityType.split(\".\") : [];\r\n    if (namespace !== est[0]) { throw { code:404, msg:\"Entity set not found\" }; }\r\n    return {\r\n        ...es,\r\n        entityType:entityTypes[est[1]]\r\n    }\r\n  }\r\n\r\n  async resolve(req, res) {\r\n    const _p = vault.get(this.uid);\r\n    if (!_p.url && !req.protocol) {\r\n      throw Error('Unable to determine server url from the request or value provided in the ODataServer constructor.')\r\n    }\r\n  \r\n    // If mounted in express, trim off the subpath (req.url) giving us just the base path\r\n    const path = (req.originalUrl || '/').replace(new RegExp(escapeRegExp(req.url) + '$'), '')\r\n    if (!_p.url) { _p.url = (req.protocol + '://' + req.get('host') + path); };\r\n\r\n    const context = new Context(this, req);\r\n\r\n    res.setHeader('OData-Version', '4.0');\r\n    res.setHeader('DataServiceVersion', '4.0');\r\n    if (_p.cors) { res.setHeader('Access-Control-Allow-Origin', _p.cors); }\r\n\r\n    const result = await context.route.resolve(req, res, _p.resolver);\r\n\r\n    if (Object.jet.is(result)) {\r\n      res.stateCode = 200;\r\n      res.setHeader('Content-Type', 'application/json');\r\n      res.end(JSON.stringify(result));\r\n    } else if (result) {\r\n      res.stateCode = 200;\r\n      res.end(result);\r\n    } else {\r\n      res.stateCode = 204;\r\n    }\r\n    \r\n  }\r\n\r\n  getResolver() {\r\n    return (req, res)=>{\r\n      this.resolve(req, res).catch(e=>{\r\n\r\n        //this.emit('odata-error', e)\r\n        const error = {\r\n          code:e?.code || 500,\r\n          message: e?.msg || e?.message || \"Unknown error\",\r\n          stack: e?.stack,\r\n          target: req.url,\r\n          details: []\r\n        }\r\n\r\n        res.statusCode = error.code;\r\n        res.setHeader('Content-Type', 'application/json');\r\n\r\n        res.end(JSON.stringify({ error }))\r\n\r\n      });\r\n    }\r\n  }\r\n\r\n  pruneResults(collection, res) {\r\n    prune(this, collection, res)\r\n  }\r\n\r\n  base64ToBuffer(collection, doc) {\r\n    const model = this.model\r\n    const entitySet = model.entitySets[collection]\r\n    const entityType = model.entityTypes[entitySet.entityType.replace(model.namespace + '.', '')]\r\n  \r\n    for (const prop in doc) {\r\n      if (!prop) {\r\n        continue\r\n      }\r\n  \r\n      const propDef = entityType[prop]\r\n  \r\n      if (!propDef) {\r\n        continue\r\n      }\r\n  \r\n      if (propDef.type === 'Edm.Binary') {\r\n        doc[prop] = Buffer.from(doc[prop], 'base64')\r\n      }\r\n    }\r\n  }\r\n\r\n  bufferToBase64(collection, res) {\r\n    const model = this.model\r\n    const entitySet = model.entitySets[collection]\r\n    const entityType = model.entityTypes[entitySet.entityType.replace(model.namespace + '.', '')]\r\n  \r\n    for (const i in res) {\r\n      const doc = res[i]\r\n      for (const prop in doc) {\r\n        if (!prop) {\r\n          continue\r\n        }\r\n  \r\n        const propDef = entityType[prop]\r\n  \r\n        if (!propDef) {\r\n          continue\r\n        }\r\n  \r\n        if (propDef.type === 'Edm.Binary') {\r\n          // nedb returns object instead of buffer on node 4\r\n          if (!Buffer.isBuffer(doc[prop]) && !doc[prop].length) {\r\n            let obj = doc[prop]\r\n            obj = obj.data || obj\r\n            doc[prop] = Object.keys(obj).map(function (key) { return obj[key] })\r\n          }\r\n  \r\n          // unwrap mongo style buffers\r\n          if (doc[prop]._bsontype === 'Binary') {\r\n            doc[prop] = doc[prop].buffer\r\n          }\r\n  \r\n          doc[prop] = Buffer.from(doc[prop]).toString('base64')\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n", "\r\nimport jet from \"@randajan/jet-core\";\r\n\r\nexport const vault = jet.vault(\"ODataServer\");\r\n\r\n\r\nexport const escapeRegExp = str=>str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');", "\r\nconst _prune = (doc, model, type) => {\r\n  if (doc instanceof Array) {\r\n    for (const i in doc) {\r\n      _prune(doc[i], model, type)\r\n    }\r\n    return;\r\n  }\r\n\r\n  for (const prop in doc) {\r\n    if (!prop || doc[prop] === undefined || prop.toString().substring(0, 6) === '@odata') {\r\n      continue;\r\n    }\r\n\r\n    const propDef = type[prop];\r\n\r\n    if (!propDef) {\r\n      delete doc[prop];\r\n      continue;\r\n    }\r\n\r\n    if (propDef.type.indexOf('Collection') === 0) {\r\n      if (propDef.type.indexOf('Collection(Edm') === 0) {\r\n        continue;\r\n      }\r\n      let complexTypeName = propDef.type.replace('Collection(' + model.namespace + '.', '');\r\n      complexTypeName = complexTypeName.substring(0, complexTypeName.length - 1);\r\n      const complexType = model.complexTypes[complexTypeName];\r\n      if (!complexType) {\r\n        throw new Error(`Complex type ${complexTypeName} was not found.`);\r\n      }\r\n\r\n      for (const i in doc[prop]) {\r\n        _prune(doc[prop][i], model, complexType);\r\n      }\r\n      continue;\r\n    }\r\n\r\n    if (propDef.type.indexOf('Edm') !== 0) {\r\n      const complexTypeName = propDef.type.replace(model.namespace + '.', '');\r\n      const complexType = model.complexTypes[complexTypeName];\r\n      if (!complexType) {\r\n        throw new Error(`Complex type ${complexTypeName} was not found.`);\r\n      }\r\n      _prune(doc[prop], model, complexType);\r\n    }\r\n  }\r\n};\r\n\r\nexport const prune = ({model}, collection, docs) => {\r\n  const entitySet = model.entitySets[collection];\r\n  const entityType = model.entityTypes[entitySet.entityType.replace(model.namespace + '.', '')];\r\n\r\n  _prune(docs, model, entityType);\r\n};", "import { pathToRegexp } from 'path-to-regexp';\r\nimport jet from \"@randajan/jet-core\";\r\n\r\nconst { solid, cached, virtual } = jet.prop;\r\n\r\nconst decodeParam = param=>param && decodeURIComponent(param).replace(/(^[\"'`]+)|([\"'`]+$)/g, \"\");\r\n\r\nexport class Route {\r\n    constructor(method, path, resolve) {\r\n\r\n        const keys = [];\r\n\r\n        solid(this, \"resolve\", resolve);\r\n\r\n        cached(this, {}, \"regex\", _ => pathToRegexp(path, keys), false);\r\n        virtual(this, \"keys\", _ => { this.regex; return keys; }, false);\r\n\r\n        solid.all(this, {\r\n            method,\r\n            path\r\n        });\r\n\r\n    }\r\n\r\n    test(pathname) {\r\n        return this.regex.test(pathname);\r\n    }\r\n\r\n    parseParams(pathname) {\r\n        const { regex, keys } = this;\r\n        const ex = regex.exec(pathname);\r\n\r\n        if (!ex) { return; }\r\n        const params = {};\r\n\r\n        for (let i = 0; i < keys.length; i++) {\r\n            solid(params, keys[i].name, decodeParam(ex[i + 1]));\r\n        }\r\n\r\n        return params;\r\n    }\r\n\r\n}", "export default (req, res) => {\r\n    const { model, url } = req.context.server\r\n\r\n    const collections = [];\r\n  \r\n    for (const key in model.entitySets) {\r\n      collections.push({\r\n        kind: 'EntitySet',\r\n        name: key,\r\n        url: key,\r\n      });\r\n    }\r\n  \r\n    return {\r\n      '@odata.context': `${url}/$metadata`,\r\n      value: collections,\r\n    }\r\n\r\n}", "import query from \"./query\";\r\n\r\nimport jet from \"@randajan/jet-core\";\r\n\r\n\r\n\r\nexport default (req, res) => {\r\n  jet.prop.solid(req.odata.params, \"count\", true);\r\n  return query(req, res);\r\n}", "import jet from \"@randajan/jet-core\";\r\n\r\nimport { vault } from '../../tools.js';\r\n\r\nexport default async (req, res, resolver) => {\r\n  const { context } = req;\r\n\r\n  const { server, params:{ collection }, options, keys } = context;\r\n\r\n  const result = await resolver(\"query\", context);\r\n\r\n  res.setHeader('Content-Type', 'application/json;odata.metadata=minimal');\r\n\r\n  let out = {};\r\n  // define the @odataContext in case of selection\r\n  let sAdditionIntoContext = '';\r\n  const oSelect = options.$select;\r\n  \r\n  if (oSelect) {\r\n    const countProp = Object.keys(oSelect).length\r\n    let ctr = 1\r\n    for (const key in oSelect) {\r\n      sAdditionIntoContext += key.toString() + (ctr < countProp ? ',' : '')\r\n      ctr++\r\n    }\r\n  }\r\n\r\n  if (!options.$filter._id) {\r\n    sAdditionIntoContext = sAdditionIntoContext.length > 0 ? '(' + sAdditionIntoContext + ')/$entity' : '/$entity'\r\n    out['@odata.context'] = server.url + '/$metadata#' + collection + sAdditionIntoContext\r\n    if (result.length > 0) {\r\n      for (const key in result[0]) {\r\n        out[key] = result[0][key]\r\n      }\r\n    }\r\n  } else {\r\n    sAdditionIntoContext = sAdditionIntoContext.length > 0 ? '(' + sAdditionIntoContext + ')' : ''\r\n    out = {\r\n      '@odata.context': server.url + '/$metadata#' + collection + sAdditionIntoContext,\r\n      value: result\r\n    }\r\n  }\r\n\r\n  if (options.$inlinecount) {\r\n    out['@odata.count'] = result.count;\r\n    out.value = result.value;\r\n  }\r\n\r\n  server.pruneResults(collection, out.value);\r\n  server.bufferToBase64(collection, out.value);\r\n\r\n  return JSON.stringify(out);\r\n}\r\n", "const keys = (o) => {\r\n  const res = [];\r\n  const k = Object.keys(o);\r\n  for (const i in k) {\r\n    if (k[i].lastIndexOf('@', 0) === 0) {\r\n      res.splice(0, 0, k[i]);\r\n    } else {\r\n      res.push(k[i]);\r\n    }\r\n  }\r\n  return res;\r\n};\r\n\r\nconst sortProperties = (o) => {\r\n  const res = {};\r\n  const props = keys(o);\r\n\r\n  for (let i = 0; i < props.length; i++) {\r\n    res[props[i]] = o[props[i]];\r\n  }\r\n  return res;\r\n};\r\n\r\nconst removeOdataType = (doc) => {\r\n  if (doc instanceof Array) {\r\n    for (const i in doc) {\r\n      if (typeof doc[i] === 'object' && doc[i] !== null) {\r\n        removeOdataType(doc[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  delete doc['@odata.type'];\r\n\r\n  for (const prop in doc) {\r\n    if (typeof doc[prop] === 'object' && doc[prop] !== null) {\r\n      removeOdataType(doc[prop]);\r\n    }\r\n  }\r\n};\r\n\r\nconst processBody = (data, {cfg, url}, req, res) => {\r\n  try {\r\n    removeOdataType(data);\r\n    cfg.base64ToBuffer(req.params.collection, data);\r\n    cfg.executeInsert(req.params.collection, data, req, (err, entity) => {\r\n      if (err) {\r\n        return res.odataError(err);\r\n      }\r\n\r\n      res.statusCode = 201;\r\n      res.setHeader('Content-Type', 'application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false;charset=utf-8');\r\n      res.setHeader('Location', url + '/' + req.params.collection + \"/('\" + encodeURI(entity._id) + \"')\");\r\n\r\n      cfg.pruneResults(req.params.collection, entity);\r\n\r\n      // odata.context must be first\r\n      entity['@odata.id'] = url + '/' + req.params.collection + \"('\" + entity._id + \"')\";\r\n      entity['@odata.editLink'] = url + '/' + req.params.collection + \"('\" + entity._id + \"')\";\r\n      entity['@odata.context'] = url + '/$metadata#' + req.params.collection + '/$entity';\r\n\r\n      entity = sortProperties(entity);\r\n      cfg.bufferToBase64(req.params.collection, [entity]);\r\n\r\n      return JSON.stringify(entity);\r\n    });\r\n  } catch (e) {\r\n    res.odataError(e);\r\n  }\r\n};\r\n\r\nexport default (server, req, res) => {\r\n  if (req.body) {\r\n    return processBody(req.body, server, req, res);\r\n  }\r\n\r\n  let body = '';\r\n  req.on('data', (data) => {\r\n    body += data;\r\n    if (body.length > 1e6) {\r\n      req.connection.destroy();\r\n    }\r\n  });\r\n  \r\n  req.on('end', () => {\r\n    return processBody(JSON.parse(body), server, req, res);\r\n  });\r\n};\r\n", "\r\nimport builder from 'xmlbuilder';\r\n\r\nexport const buildMetadata = (model) => {\r\n  const entityTypes = []\r\n  for (const typeKey in model.entityTypes) {\r\n    const entityType = {\r\n      '@Name': typeKey,\r\n      Property: []\r\n    }\r\n\r\n    for (const propKey in model.entityTypes[typeKey]) {\r\n      const property = model.entityTypes[typeKey][propKey]\r\n      const finalObject = { '@Name': propKey, '@Type': property.type }\r\n      if (Object.prototype.hasOwnProperty.call(property, 'nullable')) {\r\n        finalObject['@Nullable'] = property.nullable\r\n      }\r\n      entityType.Property.push(finalObject)\r\n\r\n      if (property.key) {\r\n        entityType.Key = {\r\n          PropertyRef: {\r\n            '@Name': propKey\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    entityTypes.push(entityType)\r\n  }\r\n\r\n  const complexTypes = []\r\n  for (const typeKey in model.complexTypes) {\r\n    const complexType = {\r\n      '@Name': typeKey,\r\n      Property: []\r\n    }\r\n\r\n    for (const propKey in model.complexTypes[typeKey]) {\r\n      const property = model.complexTypes[typeKey][propKey]\r\n\r\n      complexType.Property.push({ '@Name': propKey, '@Type': property.type })\r\n    }\r\n\r\n    complexTypes.push(complexType)\r\n  }\r\n\r\n  const container = {\r\n    '@Name': 'Context',\r\n    EntitySet: []\r\n  }\r\n\r\n  for (const setKey in model.entitySets) {\r\n    container.EntitySet.push({\r\n      '@EntityType': model.entitySets[setKey].entityType,\r\n      '@Name': setKey\r\n    })\r\n  }\r\n\r\n  const returnObject = {\r\n    'edmx:Edmx': {\r\n      '@xmlns:edmx': 'http://docs.oasis-open.org/odata/ns/edmx',\r\n      '@Version': '4.0',\r\n      'edmx:DataServices': {\r\n        Schema: {\r\n          '@xmlns': 'http://docs.oasis-open.org/odata/ns/edm',\r\n          '@Namespace': model.namespace,\r\n          EntityType: entityTypes,\r\n          EntityContainer: container\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (complexTypes.length) {\r\n    returnObject['edmx:Edmx']['edmx:DataServices'].Schema.ComplexType = complexTypes\r\n  }\r\n\r\n  return builder.create(returnObject).end({ pretty: true })\r\n}\r\n\r\nexport default (req, res) => {\r\n  console.log(req.context.server.model);\r\n  const result = buildMetadata(req.context.server.model);\r\n\r\n  res.setHeader('Content-Type', 'application/xml');\r\n\r\n  return result;\r\n}", "export default async (req, res, resolver) => {\r\n  await resolver(\"remove\", req.context);\r\n};", "const removeOdataType = (doc) => {\r\n  if (doc instanceof Array) {\r\n    for (const i in doc) {\r\n      if (typeof doc[i] === 'object' && doc[i] !== null) {\r\n        removeOdataType(doc[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  delete doc['@odata.type'];\r\n\r\n  for (const prop in doc) {\r\n    if (typeof doc[prop] === 'object' && doc[prop] !== null) {\r\n      removeOdataType(doc[prop]);\r\n    }\r\n  }\r\n};\r\n\r\nconst processBody = (body, {cfg}, req, res) => {\r\n  removeOdataType(body);\r\n\r\n  const query = {\r\n    _id: req.params.id.replace(/\\\"/g, '').replace(/'/g, '')\r\n  };\r\n\r\n  const update = {\r\n    $set: body\r\n  };\r\n\r\n  try {\r\n    cfg.base64ToBuffer(req.params.collection, update.$set);\r\n    cfg.executeUpdate(req.params.collection, query, update, req, (e, entity) => {\r\n      if (e) {\r\n        return res.odataError(e);\r\n      }\r\n\r\n      res.statusCode = 204;\r\n      \r\n    });\r\n  } catch (e) {\r\n    res.odataError(e);\r\n  }\r\n};\r\n\r\nexport default (server, req, res) => {\r\n  if (req.body) {\r\n    return processBody(req.body, server, req, res);\r\n  }\r\n  let body = '';\r\n  req.on('data', (data) => {\r\n    body += data;\r\n    if (body.length > 1e6) {\r\n      req.connection.destroy();\r\n    }\r\n  });\r\n  req.on('end', () => {\r\n    return processBody(JSON.parse(body), server, req, res);\r\n  });\r\n};\r\n", "\n        import * as module0 from './resolvers/collections.js';import * as module1 from './resolvers/count.js';import * as module2 from './resolvers/insert.js';import * as module3 from './resolvers/metadata.js';import * as module4 from './resolvers/query.js';import * as module5 from './resolvers/remove.js';import * as module6 from './resolvers/update.js'\n\n        const modules = [module0,module1,module2,module3,module4,module5,module6];\n\n        export default modules;\n        export const filenames = ['./resolvers/collections.js','./resolvers/count.js','./resolvers/insert.js','./resolvers/metadata.js','./resolvers/query.js','./resolvers/remove.js','./resolvers/update.js']\n      ", "import * as files from \"./resolvers/**\";\r\n\r\nconst _prefix = \"./resolvers/\";\r\nconst _suffix = \".js\";\r\n\r\nexport const methods = {};\r\nexport default methods;\r\n\r\nfiles.filenames.forEach((pathname, index)=>{\r\n    const name = pathname.substring(_prefix.length).slice(0, -_suffix.length);\r\n    methods[name] = files.default[index].default;\r\n});", "import { parse as parseUrl } from \"url\";\r\n\r\nimport jet from \"@randajan/jet-core\";\r\n\r\nimport { parseOptions } from \"../validations/options\";\r\n\r\nconst { solid, cached } = jet.prop;\r\n\r\nexport class Context {\r\n    constructor(server, req) {\r\n        \r\n        solid.all(this, {\r\n            server,\r\n        });\r\n\r\n        cached.all(this, {}, {\r\n            method:_=>req.method.toLowerCase(),\r\n            url:_=>parseUrl(req.originalUrl || req.url, true),\r\n            route:_=>server.findRoute(this.method, this.url.pathname),\r\n            params:_=>this.route.parseParams(this.url.pathname),\r\n            options:_=>parseOptions(this.url, this.params),\r\n            entity:_=>server.findEntity(this.params.collection),\r\n            keys:_=>Object.entries(this.entity.entityType).filter(([k, v])=>v?.key).map(([k])=>k)\r\n        });\r\n\r\n        solid(req, \"context\", this);\r\n    }\r\n}", "\r\nimport parser from 'odata-parser';\r\nimport querystring from 'querystring';\r\nimport jet from \"@randajan/jet-core\";\r\n\r\nconst { solid } = jet.prop;\r\n\r\nconst _allowedQueryOptions = ['$', '$expand', '$filter', '$format', '$inlinecount', '$select', '$skip', '$top', '$orderby'];\r\n\r\n// odata parser returns ['null', ''] for a filter with \"field eq null\"\r\n// we handle the case by fixing the query in case this happens\r\nconst filterBug = val=>(Array.isArray(val) && val.length === 2 && val[0] === 'null' && val[1] === '') ? null : val;\r\n\r\nconst parseOp = (op, left, right, func, args)=>{\r\n  const r = op || [];\r\n  r.push(parseNode(left, func, args));\r\n  r.push(parseNode(right, func, args));\r\n  return r;\r\n}\r\n\r\nconst parseSort = orderBy => {\r\n  const r = {};\r\n  if (!orderBy) { return r; }\r\n  for (const prop of orderBy) {\r\n    const propName = Object.keys(prop)[0];\r\n    r[propName] = prop[propName] === 'desc' ? -1 : 1;\r\n  }\r\n  return r;\r\n}\r\n\r\nconst parseSelect = select => {\r\n  const r = {};\r\n  if (!select) { return r; }\r\n  for (const prop of select) { r[prop] = 1; }\r\n  return r;\r\n}\r\n\r\nconst parseFilter = filter => {\r\n  if (!filter) { return {}; }\r\n  const { type, left, right, func, args } = filter;\r\n  return parseNode({ type, left, right }, func, args);\r\n}\r\n\r\n\r\nconst substringof = (args, result) => {\r\n\r\n  const prop = args[0].type === 'property' ? args[0] : args[1];\r\n  const lit = args[0].type === 'literal' ? args[0] : args[1];\r\n\r\n  result[prop.name] = new RegExp(lit.value);\r\n}\r\n\r\nconst _pushProp = (result, left, rightValue) => {\r\n  if (left.type !== 'property' || left.name.indexOf('/') === -1) { return result[left.name] = rightValue; }\r\n\r\n  const fragments = left.name.split('/');\r\n  const obj = result[fragments[0]] || {};\r\n\r\n  for (let i = 1; i < fragments.length; i++) {\r\n    if (i === (fragments.length - 1)) {\r\n      obj[fragments[i]] = rightValue\r\n    } else {\r\n      obj[fragments[i]] = obj[fragments[i]] || {}\r\n    }\r\n  }\r\n\r\n  return result[fragments[0]] = obj;\r\n}\r\n\r\nconst parseNode = ({ type, left, right }, func, args) => {\r\n  const result = {};\r\n  const pushProp = rightValue=>_pushProp(result, left, rightValue);\r\n\r\n  if (right.type === \"literal\") {\r\n    if (type === 'eq') { pushProp(filterBug(right.value)); }\r\n    if (type === 'lt') { pushProp({ $lt: right.value }); }\r\n    if (type === 'gt') { pushProp({ $gt: right.value }); }\r\n    if (type === 'le') { pushProp({ $lte: right.value }); }\r\n    if (type === 'ge') { pushProp({ $gte: right.value }); }\r\n    if (type === 'ne') { pushProp({ $ne:filterBug(right.value) }); }\r\n  }\r\n\r\n  if (type === 'and') { result.$and = parseOp(result.$and, left, right, func, args); }\r\n  if (type === 'or') { result.$or = parseOp(result.$or, left, right, func, args); }\r\n  if (type === 'functioncall') {\r\n    switch (func) {\r\n      case 'substringof': substringof(args, result)\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nconst queryTransform = (query) => {\r\n\r\n  if (query.$top) { query.$limit = query.$top; }\r\n  if (query.$inlinecount === 'allpages') { query.$count = true; }\r\n\r\n  query.$sort = parseSort(query.$orderby);\r\n  query.$filter = parseFilter(query.$filter);\r\n  query.$select = parseSelect(query.$select);\r\n\r\n  return query;\r\n}\r\n\r\nexport const parseOptions = (url, params) => {\r\n  const query = url.query;\r\n\r\n  let r = { $filter: {} };\r\n\r\n  if (url.search) {\r\n    const queryValid = {}\r\n    for (const opt of _allowedQueryOptions) {\r\n      if (query[opt]) { queryValid[opt] = query[opt]; }\r\n    }\r\n\r\n    const encodedQS = decodeURIComponent(querystring.stringify(queryValid));\r\n    if (encodedQS) { r = queryTransform(parser.parse(encodedQS)); }\r\n    if (query.$count) { r.$inlinecount = true; }\r\n  }\r\n\r\n  if (params.count) { r.$count = true; }\r\n  if (params.id) { r.$filter._id = params.id; }\r\n\r\n  return r;\r\n}", "import { Server } from \"./class/Server.js\";\r\n\r\nexport default (options)=>new Server(options);\r\n", "import { ObjectId } from \"mongodb\";\r\nimport jet from \"@randajan/jet-core\";\r\n\r\nconst { solid, cached } = jet.prop;\r\n\r\nconst _convertStringsToObjectIds = obj => jet.map(obj, (val, fullKey, parentKey, key)=>{\r\n    return (key === '_id') ? ObjectId(val) : val;\r\n}, true)\r\n\r\n\r\nconst update = async (collection, { query, data }) => {\r\n    if (data.$set) { delete data.$set._id; } //idk why, it was in source code\r\n\r\n    const res = await collection.updateOne(query, data);\r\n\r\n    if (res.matchedCount !== 1) { throw Error('Update not successful'); }\r\n\r\n    return res.matchedCount;\r\n}\r\n\r\nconst remove = async (collection, { options }) => {\r\n    const { $select, $sort, $skip, $limit, $count, $inlinecount, $filter } = _convertStringsToObjectIds(options);\r\n\r\n    const res = await collection.deleteOne($filter);\r\n\r\n    if (res.deletedCount < 1) { throw {code:410, msg:\"Gone\"}; }\r\n\r\n    return res.deletedCount;\r\n\r\n}\r\n\r\nconst insert = async (collection, { data }) => {\r\n\r\n    const value = await collection.insertOne(data);\r\n\r\n    return collection.findOne({ _id: value.insertedId });\r\n\r\n}\r\n\r\nconst query = async (collection, { options }) => {\r\n    const { $select, $sort, $skip, $limit, $count, $inlinecount, $filter } = _convertStringsToObjectIds(options);\r\n\r\n    let qr = collection.find($filter, { projection: $select || {} });\r\n\r\n    if ($sort) { qr = qr.sort($sort); }\r\n    if ($skip) { qr = qr.skip($skip); }\r\n    if ($limit) { qr = qr.limit($limit); }\r\n    if ($count) { return qr.count(); }\r\n\r\n    const value = await qr.toArray();\r\n\r\n    if (!$inlinecount) { return value; }\r\n\r\n    const count = await collection.find($filter).count();\r\n\r\n    return { count, value };\r\n\r\n}\r\n\r\nexport default getDB=>{\r\n    const _actions = { update, remove, query, insert };\r\n    \r\n    return async (actionName, context)=>{\r\n        const action = _actions[actionName];\r\n        if (!action) { throw Error(`Unknown action '${actionName}'`); }\r\n        \r\n        const db = await getDB();\r\n        const collection = db.collection(context.params.collection);\r\n    \r\n        return action(collection, context);\r\n    }\r\n\r\n}\r\n", "import { log } from \"@randajan/simple-lib/node\";\r\nimport ODataServer from \"../../dist/index.js\";\r\nimport mongoAdapter from \"../../dist/adapter/mongo.js\";\r\n\r\nimport { MongoClient } from \"mongodb\";\r\nimport http from \"http\";\r\n\r\nconst _mongos = {};\r\nconst _protocolSuffix = /:\\/\\//;\r\n\r\n\r\nconst getMongo = async (dbUrl, options)=>{\r\n    dbUrl = dbUrl || \"localhost:27017\";\r\n\r\n    if (!_protocolSuffix.test(dbUrl)) { dbUrl = \"mongodb://\" + dbUrl; }\r\n\r\n    if (_mongos[dbUrl]) { return _mongos[dbUrl]; }\r\n    const mongo = _mongos[dbUrl] = await MongoClient.connect(dbUrl, options);\r\n    process.on(\"exit\", _=>mongo.close());\r\n    mongo.on(\"close\", _=>{ delete _mongos[dbUrl]; });\r\n\r\n    return mongo;\r\n}\r\n\r\nconst model = {\r\n    namespace: \"piapmo\",\r\n    entityTypes: {\r\n        \"UserType\": {\r\n            \"_id\": {\"type\": \"Edm.String\", key: true},\r\n            \"test\": {\"type\": \"Edm.String\"},            \r\n        },\r\n        \"DebugRequestType\":{\r\n            \"at\": {\"type\": \"Edm.DateTime\"},\r\n            \"method\": {\"type\": \"Edm.String\"},\r\n            \"path\": {\"type\": \"Edm.String\"},\r\n            \"query\": {\"type\": \"Edm.String\"},\r\n            \"headers\": {\"type\": \"Edm.String\"},\r\n            \"body\": {\"type\": \"Edm.String\"}\r\n        }\r\n    },   \r\n    entitySets: {\r\n        \"users\": {\r\n            entityType: \"piapmo.UserType\"\r\n        },\r\n        \"_debug_requests\":{\r\n            entityType: \"piapmo.DebugRequestType\"\r\n        }\r\n    }\r\n};\r\n\r\nexport const mongoApi = ODataServer({\r\n    url:'http://localhost:1337',\r\n    model,\r\n    resolver:mongoAdapter(async _=>(await getMongo()).db(\"piapmo\")),\r\n});\r\n\r\n\r\nhttp.createServer(mongoApi.getResolver()).listen(1337);"],
  "mappings": "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",
  "names": ["log", "Buffer", "jet", "model", "keys", "collections", "removeOdataType", "processBody", "query", "update", "solid", "cached", "virtual", "jet", "solid", "cached", "update", "query", "remove", "insert", "count"]
}
