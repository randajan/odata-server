{
  "version": 3,
  "sources": ["../../../src/mods/responder/Express.js"],
  "sourcesContent": ["import jet from \"@randajan/jet-core\";\r\n\r\nconst { solid } = jet.prop;\r\n\r\nexport class ExpressResponder {\r\n\r\n    constructor(request, response) {\r\n        solid.all(this, {request, response});\r\n    }\r\n\r\n    getURL() {\r\n        const req = this.request;\r\n        return req.originalUrl || req.url;\r\n    }\r\n\r\n    getMethod() {\r\n        return this.request.method;\r\n    }\r\n\r\n    async getBody() {\r\n        const req = this.request;\r\n\r\n        if (req.body) { return req.body; }\r\n    \r\n        return new Promise((res, rej) => {\r\n            let body = \"\";\r\n            req.on('data', data => {\r\n                if ((body += data).length > 1e6) { rej({ statusCode: 400, msg: \"Request is too long\" }); }\r\n            });\r\n            req.on('end', _ => {\r\n                try { res(body ? JSON.parse(body) : undefined); }\r\n                catch(e) { rej({ statusCode:400, msg:e.message }); }\r\n            });\r\n        });\r\n    }\r\n\r\n    getType() {\r\n        const req = this.request;\r\n        const headers = jet.json.from(req.headers);\r\n        const accept = headers?.accept;\r\n        if (typeof accept !== \"string\") { return; }\r\n        const xml = accept.includes(\"xml\");\r\n        const json = accept.includes(\"json\");\r\n        if (xml !== json) { return xml ? \"xml\" : \"json\"; }\r\n    }\r\n\r\n    setHeader(name, value) {\r\n        this.response.setHeader(name, value);\r\n    }\r\n\r\n    setBody(statusCode, body) {\r\n        const res = this.response;\r\n\r\n        res.statusCode = statusCode;\r\n        res.end(body);\r\n    }\r\n    \r\n}\r\n\r\nexport default (req, res)=>new ExpressResponder(req, res);"],
  "mappings": "gCAAA,OAAOA,MAAS,qBAEhB,GAAM,CAAE,MAAAC,CAAM,EAAID,EAAI,KAETE,EAAN,KAAuB,CAE1B,YAAYC,EAASC,EAAU,CAC3BH,EAAM,IAAI,KAAM,CAAC,QAAAE,EAAS,SAAAC,CAAQ,CAAC,CACvC,CAEA,QAAS,CACL,IAAMC,EAAM,KAAK,QACjB,OAAOA,EAAI,aAAeA,EAAI,GAClC,CAEA,WAAY,CACR,OAAO,KAAK,QAAQ,MACxB,CAEA,MAAM,SAAU,CACZ,IAAMA,EAAM,KAAK,QAEjB,OAAIA,EAAI,KAAeA,EAAI,KAEpB,IAAI,QAAQ,CAACC,EAAKC,IAAQ,CAC7B,IAAIC,EAAO,GACXH,EAAI,GAAG,OAAQI,GAAQ,EACdD,GAAQC,GAAM,OAAS,KAAOF,EAAI,CAAE,WAAY,IAAK,IAAK,qBAAsB,CAAC,CAC1F,CAAC,EACDF,EAAI,GAAG,MAAOK,GAAK,CACf,GAAI,CAAEJ,EAAIE,EAAO,KAAK,MAAMA,CAAI,EAAI,MAAS,CAAG,OAC1CG,EAAN,CAAWJ,EAAI,CAAE,WAAW,IAAK,IAAII,EAAE,OAAQ,CAAC,CAAG,CACvD,CAAC,CACL,CAAC,CACL,CAEA,SAAU,CACN,IAAMN,EAAM,KAAK,QAEXO,EADUZ,EAAI,KAAK,KAAKK,EAAI,OAAO,GACjB,OACxB,GAAI,OAAOO,GAAW,SAAY,OAClC,IAAMC,EAAMD,EAAO,SAAS,KAAK,EAC3BE,EAAOF,EAAO,SAAS,MAAM,EACnC,GAAIC,IAAQC,EAAQ,OAAOD,EAAM,MAAQ,MAC7C,CAEA,UAAUE,EAAMC,EAAO,CACnB,KAAK,SAAS,UAAUD,EAAMC,CAAK,CACvC,CAEA,QAAQC,EAAYT,EAAM,CACtB,IAAMF,EAAM,KAAK,SAEjBA,EAAI,WAAaW,EACjBX,EAAI,IAAIE,CAAI,CAChB,CAEJ,EAEOU,EAAQ,CAACb,EAAKC,IAAM,IAAIJ,EAAiBG,EAAKC,CAAG",
  "names": ["jet", "solid", "ExpressResponder", "request", "response", "req", "res", "rej", "body", "data", "_", "e", "accept", "xml", "json", "name", "value", "statusCode", "Express_default"]
}
