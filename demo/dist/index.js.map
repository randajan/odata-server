{
  "version": 3,
  "sources": ["../../node_modules/@randajan/simple-lib/src/logger.js", "../../node_modules/@randajan/simple-lib/src/info/index.js", "../../node_modules/@randajan/simple-lib/src/node/index.js", "../../src/class/Server.js", "../../src/tools.js", "../../src/class/Route.js", "../../src/actions/resolvers/collections.js", "../../src/actions/resolvers/cors.js", "../../src/actions/resolvers/count.js", "../../src/actions/resolvers/insert.js", "../../src/actions/resolvers/metadata.js", "../../src/actions/resolvers/query.js", "../../src/actions/resolvers/remove.js", "../../src/actions/resolvers/update.js", "../../dist/import-glob:./resolvers/**", "../../src/actions/index.js", "../../src/class/Model.js", "../../src/class/ModelProp.js", "../../src/consts.js", "../../src/class/ModelEntity.js", "../../src/parsers/types.js", "../../src/class/Gateway.js", "../../src/class/Context.js", "../../src/parsers/options.js", "../../src/converters.js", "../../src/index.js", "../../src/mods/adapter/Mongo.js", "../../src/mods/responder/Express.js", "../src/index.js"],
  "sourcesContent": ["import chalkNative from \"chalk\";\r\n\r\nconst chalkProps = Object.getOwnPropertyNames(Object.getPrototypeOf(chalkNative)).filter(v=>v!==\"constructor\");\r\n\r\nclass Logger extends Function {\r\n    constructor(formater, chalkInit) {\r\n        super();\r\n        const chalk = chalkInit||chalkNative;\r\n\r\n        const log = (...msgs)=>{ console.log(chalk(formater(msgs))); }\r\n        const self = Object.setPrototypeOf(log.bind(), new.target.prototype);\r\n\r\n        for (const prop of chalkProps) {\r\n            Object.defineProperty(self, prop, { get: _=>new Logger(formater, chalk[prop]), enumerable:false });\r\n        }\r\n        \r\n        return self;\r\n    }\r\n}\r\n\r\nexport const logger = (...prefixes)=>{\r\n    const now = _=>(new Date()).toLocaleTimeString(\"cs-CZ\");\r\n    prefixes = prefixes.filter(v=>!!v).join(\" \");\r\n\r\n    return new Logger(msgs=>`${prefixes} | ${now()} | ${msgs.join(\" \")}`);\r\n}", "const enumerable = true;\r\nconst lockObject = o=>{\r\n    if (typeof o !== \"object\") { return o; }\r\n\r\n    const r = {};\r\n    for (const i in o) {\r\n        const descriptor = { enumerable };\r\n        let val = o[i];\r\n        if (val instanceof Array) { descriptor.get = _=>[...val]; }\r\n        else { descriptor.value = lockObject(val); }\r\n        Object.defineProperty(r, i, descriptor);\r\n    }\r\n\r\n    return r;\r\n}\r\n\r\nexport const info = lockObject(__slib_info);\r\nexport default info;", "import { parentPort } from \"worker_threads\";\r\nimport { info } from \"../info\";\r\nimport { logger } from \"../logger\";\r\n\r\nexport default info;\r\n\r\nexport const log = logger(info.name, info.version, info.env);\r\n\r\nexport {\r\n    info,\r\n}\r\n\r\nparentPort.on(\"message\", msg=>{\r\n    if (msg===\"shutdown\") { process.exit(0); }\r\n});\r\n\r\nprocess.on('uncaughtException', e=>{\r\n  console.log(e.stack);\r\n});", "\r\nimport jet from \"@randajan/jet-core\";\r\n\r\nimport { parseUrl, trimUrl, unwrap, vault } from \"../tools\";\r\n\r\nimport { Route } from \"./Route\";\r\n\r\nimport { Model } from \"./Model\";\r\nimport { Gateway } from \"./Gateway\";\r\n\r\nconst { solid, cached } = jet.prop;\r\n\r\nexport class Server {\r\n  constructor(options={}) {\r\n\r\n    const { model, cors, converter, onError } = options;\r\n\r\n    const [ uid, _p ] = vault.set({\r\n      routes:{},\r\n    });\r\n\r\n    solid(this, \"uid\", uid, false);\r\n    solid(this, \"cors\", String.jet.to(cors));\r\n\r\n    cached.all(this, _p, {\r\n      _model:async _=>new Model(this, await (jet.isRunnable(model) ? model() : model), converter)\r\n    }, false);\r\n\r\n    solid.all(this, {\r\n      serve:(responder, url, ...extendArgs)=>{\r\n        const gw = new Gateway(this, url, options, extendArgs);\r\n        return (...a)=>gw.resolve(responder(...a));\r\n      },\r\n      onError:jet.isRunnable(onError) ? onError : ()=>{}\r\n    }, false);\r\n\r\n    this.addRoute(\"get\", '/', \"collections\");\r\n    this.addRoute(\"get\", '/\\$metadata', \"metadata\");\r\n\r\n    this.addRoute(\"get\", '/:entity/\\$count', \"count\");\r\n    this.addRoute(\"get\", '/:entity\\\\(:id\\\\)', \"query\");\r\n    this.addRoute(\"get\", '/:entity', \"query\");\r\n\r\n    this.addRoute(\"delete\", '/:entity\\\\(:id\\\\)', \"remove\");\r\n    this.addRoute(\"patch\", '/:entity\\\\(:id\\\\)', \"update\");\r\n    this.addRoute(\"post\", '/:entity', \"insert\");\r\n\r\n    if (this.cors) { this.addRoute(\"options\", '/(.*)', \"cors\"); }\r\n\r\n  }\r\n\r\n  msg(text) {\r\n    return \"OData server \" + text;\r\n  }\r\n\r\n  addRoute(method, path, action) {\r\n    const { routes } = vault.get(this.uid);\r\n    const list = routes[method] || (routes[method] = []);\r\n    const route = new Route(this, method, path, action);\r\n    list.push(route);\r\n    return route;\r\n  }\r\n\r\n  findRoute(method, path) {\r\n    const _p = vault.get(this.uid);\r\n    const routes = _p.routes[method] || [];\r\n\r\n    for (const route of routes) {\r\n      if (route.test(path)) { return route; }\r\n    }\r\n\r\n    throw { code: 404, msg: \"Not found\" };\r\n  }\r\n\r\n  async fetchModel() {\r\n    return this._model;\r\n  }\r\n\r\n}\r\n", "\r\nimport { parse as urlParser } from \"url\";\r\nimport builder from 'xmlbuilder';\r\nimport jet from \"@randajan/jet-core\";\r\n\r\nconst { solid } = jet.prop;\r\n\r\nexport const vault = jet.vault(\"ODataServer\");\r\n\r\n\r\nexport const withBrackets = (val, quote=\"\")=>{\r\n    const str = String.jet.to(val, quote+\",\"+quote);\r\n    return str ? \"(\"+quote+str+quote+\")\" : \"\";\r\n}\r\n\r\nexport const getScope = (entity, ids, quote=\"\")=>entity + withBrackets(ids, quote);\r\nexport const getScopeMeta = (entity, ids, quote=\"\")=>\"$metadata#\"+getScope(entity, ids, quote);\r\n\r\n\r\nexport const isWrapped = (str, prefix=\"\", suffix=\"\")=>typeof str === \"string\" ? str.startsWith(prefix) && str.endsWith(suffix) : false;\r\nexport const unwrap = (str, prefix=\"\", suffix=\"\")=>isWrapped(str = String.jet.to(str), prefix, suffix) ? str.slice(prefix.length, str.length - suffix.length) : \"\";\r\n\r\nexport const trimUrl = pathname=>pathname.endsWith(\"/\") ? pathname.slice(0, pathname.length-1) : pathname;\r\n\r\nexport const parseUrl = (url, parseQueryString=false)=>{\r\n    url = urlParser(String.jet.to(url) || \"/\", parseQueryString);\r\n    solid(url, \"base\", ((!url.host ? \"\" : (!url.protocol ? \"\" : url.protocol+\"//\")+url.host) + trimUrl(url.pathname)));\r\n    solid(url, \"toString\", _=>url.base, false);\r\n    return url;\r\n}\r\n\r\nexport const decodeParam = param=>param && decodeURIComponent(param).replace(/(^[\"'`]+)|([\"'`]+$)/g, \"\");\r\n\r\nconst _knownBodyTypes = [\"json\", \"xml\"];\r\nexport const setResponderBody = (responder, body, defaultType=\"json\", extraType=\"\")=>{\r\n    let type = responder.getType();\r\n    if (!type || !_knownBodyTypes.includes(type)) { type = defaultType; }\r\n\r\n    responder.setHeader(\"Content-Type\", `application/${type}` + (extraType ? \";\"+extraType : \"\"));\r\n    const out = type === \"json\" ? JSON.stringify(body) : builder.create(body).end({ pretty: true });\r\n    return responder.setBody(200, out);\r\n}", "import { pathToRegexp } from 'path-to-regexp';\r\nimport jet from \"@randajan/jet-core\";\r\n\r\nimport actions from \"../actions\";\r\nimport { decodeParam } from '../tools';\r\n\r\nconst { solid, cached, virtual } = jet.prop;\r\n\r\nexport class Route {\r\n    constructor(server, method, path, action) {\r\n\r\n        const keys = [];\r\n\r\n        cached(this, {}, \"regex\", _ => pathToRegexp(path, keys), false);\r\n        virtual(this, \"keys\", _ => { this.regex; return keys; }, false);\r\n\r\n        solid(this, \"server\", server, false);\r\n        solid.all(this, {\r\n            method,\r\n            path,\r\n            action\r\n        });\r\n\r\n        solid(this, \"resolve\", actions[action]);\r\n\r\n        if (!this.resolve) {\r\n            throw Error(this.msg(`action '${action}' is not one of: '${Object.keys(actions).join(\", \")}'`));\r\n        }\r\n\r\n    }\r\n\r\n    msg(text) {\r\n        return this.server.msg(`route '${this.path}' ${text}`);\r\n    }\r\n\r\n    test(pathname) {\r\n        return this.regex.test(pathname);\r\n    }\r\n\r\n    parseParams(pathname) {\r\n        const { action, regex, keys } = this;\r\n        const ex = regex.exec(pathname);\r\n\r\n        if (!ex) { throw Error(this.msg(`parseParams('${pathname}') failed`)); }\r\n        const params = {};\r\n\r\n        for (let i = 0; i < keys.length; i++) {\r\n            solid(params, keys[i].name, decodeParam(ex[i + 1]));\r\n        }\r\n        \r\n        solid(params, \"count\", action === \"count\");\r\n\r\n        return params;\r\n    }\r\n\r\n}", "export default async context => {\r\n    const { responder, model, gw:{ url } } = context;\r\n\r\n    const collections = [];\r\n  \r\n    for (const name in model.entitySets) {\r\n      if (!(await context.filter(name))) { continue; }\r\n      collections.push({\r\n        kind: \"EntitySet\",\r\n        name,\r\n        url: name,\r\n      });\r\n    }\r\n  \r\n    const out = {\r\n      \"@odata.context\": `${url}/$metadata`,\r\n      value: collections,\r\n    }\r\n\r\n    responder.setHeader(\"Content-Type\", \"application/json\");\r\n    return responder.setBody(200, JSON.stringify(out));\r\n\r\n}", "export default async context => {\r\n    const { responder } = context;\r\n    \r\n    return responder.setBody(204);\r\n};", "export default async context=> {\r\n  const { responder } = context;\r\n  \r\n  const count = Math.max(0, Number.jet.to(await context.fetchResponseBodyRaw()));\r\n  const { $select } = await context.fetchOptions();\r\n\r\n  const out = {\r\n    \"@odata.context\":context.getScopeMeta($select ? Object.keys($select) : \"\"),\r\n    \"@odata.count\":count,\r\n    value:count\r\n  };\r\n\r\n  responder.setHeader(\"Content-Type\", \"application/json;odata.metadata=minimal\");\r\n  return responder.setBody(200, JSON.stringify(out));\r\n\r\n}\r\n", "export default async context=> {\r\n  const { responder } = context;\r\n\r\n  const { primaryKey } = await context.fetchEntity();\r\n  const rawBody = await context.fetchResponseBodyRaw();\r\n  const id = rawBody[primaryKey];\r\n\r\n  const out = {};\r\n  out[\"@odata.context\"] = context.getScopeMetaEntity();\r\n  out[\"@odata.id\"] = out[\"@odata.editLink\"] = context.getScope(id, \"'\");\r\n\r\n  await context.pullResponseBody(out);\r\n\r\n  responder.setHeader(\"Content-Type\", \"application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false;charset=utf-8\");\r\n  responder.setHeader(\"Location\", context.getScope(encodeURI(id), \"'\"));\r\n  return responder.setBody(201, JSON.stringify(out));\r\n  \r\n};\r\n\r\n\r\n", "import { setResponderBody, unwrap } from \"../../tools\";\r\nimport builder from 'xmlbuilder';\r\n\r\nconst mapProps = async (props, entity, filter)=>{\r\n  const r = [];\r\n  for (const name in props) {\r\n    const { key, type, nullable } = props[name];\r\n    if (!key && entity && !await filter(entity, name)) { continue; }\r\n    r.push({ \"@Name\": name, \"@Type\": type, \"@Nullable\":nullable });\r\n  }\r\n  return r;\r\n}\r\n\r\nexport default async context=> {\r\n\r\n  const { model, responder } = context;\r\n  const namespace = model.namespace;\r\n\r\n  const entityTypes = [];\r\n  const entitySets = [];\r\n  const complexTypes = [];\r\n\r\n  for (const name in model.entitySets) {\r\n    if (!await context.filter(name)) { continue; }\r\n\r\n    const { entityType, primaryKey, props } = model.entitySets[name];\r\n\r\n    entityTypes.push({\r\n      \"@Name\": unwrap(entityType, namespace+\".\"),\r\n      Property:await mapProps(props, name, context.filter),\r\n      Key:primaryKey ? { PropertyRef: { \"@Name\": primaryKey } } : undefined\r\n    });\r\n\r\n    entitySets.push({\r\n      \"@EntityType\": entityType,\r\n      \"@Name\": name\r\n    });\r\n\r\n  }\r\n\r\n  for (const name in model.complexTypes) {\r\n    const { props } = model.complexTypes[name];\r\n    complexTypes.push({ \"@Name\": name, Property:await mapProps(props)});\r\n  }\r\n\r\n  const out = {\r\n    \"edmx:Edmx\": {\r\n      \"@xmlns:edmx\": \"http://docs.oasis-open.org/odata/ns/edmx\",\r\n      \"@Version\": \"4.0\",\r\n      \"edmx:DataServices\": {\r\n        Schema: {\r\n          \"@xmlns\": \"http://docs.oasis-open.org/odata/ns/edm\",\r\n          \"@Namespace\": model.namespace,\r\n          EntityType: entityTypes,\r\n          EntityContainer: {\r\n            \"@Name\": \"Context\",\r\n            EntitySet: entitySets\r\n          },\r\n          ComplexType:complexTypes.length ? complexTypes : undefined\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return setResponderBody(responder, out, \"xml\");\r\n\r\n}", "export default async context=> {\r\n  const { responder, params} = context;\r\n  const { primaryKey } = await context.fetchEntity();\r\n  const { $select, $count } = await context.fetchOptions();\r\n\r\n  let out = {};\r\n\r\n  if (params.hasOwnProperty(\"id\")) {\r\n    out[\"@odata.context\"] = context.getScopeMetaEntity($select ? Object.keys($select) : \"\");\r\n    await context.pullResponseBody(out);\r\n    if (!out.hasOwnProperty(primaryKey)) { throw {code:404, msg:\"Not found\"}; }\r\n  } else {\r\n    out[\"@odata.context\"] = context.getScopeMeta($select ? Object.keys($select) : \"\");\r\n    const value = await context.pullResponseBody([]);\r\n    if ($count) { out[\"@odata.count\"] = value.length; }\r\n    out.value = value;\r\n  }\r\n\r\n  responder.setHeader(\"Content-Type\", \"application/json;odata.metadata=minimal\");\r\n  return responder.setBody(200, JSON.stringify(out));\r\n\r\n}\r\n", "export default async context=> {\r\n  const { responder } = context;\r\n\r\n  await context.fetchEntity();\r\n\r\n  const rawBody = await context.fetchResponseBodyRaw();\r\n  if (!rawBody) { throw {code:404, msg:\"Not found\"}; }\r\n\r\n  return responder.setBody(204);\r\n  \r\n};", "export default async context=> {\r\n  const { responder } = context;\r\n\r\n  await context.fetchEntity();\r\n\r\n  const rawBody = await context.fetchResponseBodyRaw();\r\n  if (!rawBody) { throw {code:404, msg:\"Not found\"}; }\r\n\r\n  return responder.setBody(204);\r\n  \r\n};", "\n        import * as module0 from './resolvers/collections.js';import * as module1 from './resolvers/cors.js';import * as module2 from './resolvers/count.js';import * as module3 from './resolvers/insert.js';import * as module4 from './resolvers/metadata.js';import * as module5 from './resolvers/query.js';import * as module6 from './resolvers/remove.js';import * as module7 from './resolvers/update.js'\n\n        const modules = [module0,module1,module2,module3,module4,module5,module6,module7];\n\n        export default modules;\n        export const filenames = ['./resolvers/collections.js','./resolvers/cors.js','./resolvers/count.js','./resolvers/insert.js','./resolvers/metadata.js','./resolvers/query.js','./resolvers/remove.js','./resolvers/update.js']\n      ", "import * as files from \"./resolvers/**\";\r\n\r\nconst _prefix = \"./resolvers/\";\r\nconst _suffix = \".js\";\r\n\r\nexport const methods = {};\r\nexport default methods;\r\n\r\nfiles.filenames.forEach((pathname, index)=>{\r\n    const name = pathname.substring(_prefix.length).slice(0, -_suffix.length);\r\n    methods[name] = files.default[index].default;\r\n});", "import jet from \"@randajan/jet-core\";\r\n\r\nimport { ModelProp } from \"./ModelProp\";\r\nimport { ModelEntity } from \"./ModelEntity\";\r\nimport { assignPack } from \"../parsers/types\";\r\n\r\nimport { propTypes } from \"../consts\";\r\nimport { isWrapped, unwrap } from \"../tools\";\r\n\r\nconst { solid } = jet.prop;\r\n\r\nconst createProp = (model, msg, name, attrs)=>new ModelProp(model, msg, name, attrs);\r\nconst createEntity = (model, msg, name, attrs)=>new ModelEntity(model, msg, name, attrs);\r\nconst createType = (model, msg, name, props)=>assignPack({}, model, msg, name, props, createProp);\r\n\r\nexport class Model {\r\n\r\n    constructor(server, model, converter) {\r\n        const { namespace, entityTypes, entitySets, complexTypes } = model;\r\n\r\n        solid(this, \"server\", server, false);\r\n        solid(this, \"namespace\", String.jet.to(namespace));\r\n\r\n        if (!this.namespace) { throw Error(this.msg(\"namespace missing\")); }\r\n\r\n        const _msg = this.msg.bind(this);\r\n        solid(this, \"complexTypes\", assignPack({}, this, _msg, \"complexTypes\", complexTypes, createType));\r\n        solid(this, \"entityTypes\", assignPack({}, this, _msg, \"entityTypes\", entityTypes, createType));\r\n        solid(this, \"entitySets\", assignPack({}, this, _msg, \"entitySets\", entitySets, createEntity));\r\n        solid(this, \"convert\", {}, false);\r\n\r\n        const csr = jet.isRunnable(converter);\r\n        if (!csr) { converter = Object.jet.to(converter); }\r\n\r\n        propTypes.map(t=>{\r\n            const fce = csr ? (v, method, context)=>converter(t, v, method, context) : jet.isRunnable(converter[t]) ? converter[t] : v=>v;\r\n            solid(this.convert, t, fce);\r\n        });\r\n        \r\n        \r\n    }\r\n\r\n    msg(text, ...path) {\r\n        path = path.join(\".\") || \"\";\r\n        if (path) { path = \".\"+path; }\r\n        return this.server.msg(\"model\" + path + \" \" + text);\r\n    }\r\n\r\n    checkNamespace(str) { return isWrapped(str, this.namespace+\".\"); }\r\n    stripNamespace(str) { return unwrap(str, this.namespace+\".\"); }\r\n\r\n    findEntity(name) {\r\n        const ent = this.entitySets[name];\r\n        if (!ent) { throw Error(this.msg(\"not found!\", \"entitySets\", name)); }\r\n        return ent;\r\n    }\r\n\r\n}", "import jet from \"@randajan/jet-core\";\r\n\r\nimport { propTypes } from \"../consts\";\r\nimport { unwrap } from \"../tools\";\r\n\r\nconst { solid } = jet.prop;\r\n\r\nconst convert = (prop, vals, method, context, subCollection)=> {\r\n    const { isCollection, complex, primitive, name, model } = prop;\r\n    if (name.startsWith(\"@odata\")) { return; }\r\n\r\n    if (!subCollection && isCollection) {\r\n        return (Array.isArray(vals) ? vals : [vals]).map(v=>convert(prop, v, method, context, true));\r\n    }\r\n\r\n    if (complex) { return complex[method](vals); }\r\n\r\n    return model.convert[primitive](vals, method, context);\r\n}\r\n\r\nexport class ModelProp {\r\n\r\n    constructor(model, msg, name, attrs) {\r\n\r\n        solid(this, \"model\", model, false);\r\n        solid(this, \"name\", name);\r\n\r\n        attrs = Object.jet.to(attrs);\r\n        for (const i in attrs) { solid(this, i, attrs[i]); }\r\n\r\n        if (!this.type) { throw Error(msg(`missing!`, name, \"type\")); }\r\n\r\n        const unCollection = unwrap(this.type, \"Collection(\", \")\");\r\n        solid(this, \"isCollection\", !!unCollection);\r\n\r\n        const complexName = unwrap(unCollection || this.type, model.namespace+\".\");\r\n        const complex = model.complexTypes[complexName];\r\n        if (complexName && !complex) { throw Error(msg(`definition missing at 'model.complexTypes.${complexName}'`, name, \"type\")); }\r\n\r\n        solid(this, \"primitive\", complex ? undefined : (unCollection || this.type));\r\n        solid(this, \"complex\", complex);\r\n\r\n        if (!complex && !propTypes.includes(this.primitive)) {\r\n            throw Error(msg(`invalid value '${this.type}' - accepts one of: '${propTypes.join(\", \")}'`, name, \"type\"));\r\n        }\r\n\r\n    }\r\n\r\n    convert(val, method, context) {\r\n        return convert(this, val, method, context);\r\n    }\r\n\r\n\r\n    toAdapter(val, context) {\r\n        return this.convert(val, \"toAdapter\", context);\r\n    }\r\n\r\n    toResponse(val, context) {\r\n        return this.convert(val, \"toResponse\", context);\r\n    }\r\n\r\n}", "\r\n\r\nexport const propTypes = [\r\n    'Edm.Int16',\r\n    'Edm.Int32',\r\n    'Edm.Int64',\r\n    'Edm.Boolean',\r\n    'Edm.String',\r\n    'Edm.Date',\r\n    'Edm.Single',\r\n    'Edm.Double',\r\n    'Edm.Decimal',\r\n    'Edm.TimeOfDay',\r\n    'Edm.DateTimeOffset',\r\n    'Edm.Byte',\r\n    'Edm.Binary',\r\n    'Edm.Duration'\r\n];\r\n\r\nexport const knownActions = [\r\n    \"query\",\r\n    \"count\",\r\n    \"insert\",\r\n    \"update\",\r\n    \"remove\"\r\n];\r\n\r\nexport const allowedQueryOptions = ['$', '$filter', '$expand', '$select', '$orderby', '$top', '$skip', '$count', '$format'];", "import jet from \"@randajan/jet-core\";\r\n\r\nimport { unwrap } from \"../tools\";\r\n\r\nconst { solid, cached } = jet.prop;\r\n\r\n\r\nexport class ModelEntity {\r\n\r\n    constructor(model, msg, name, attrs) {\r\n\r\n        solid(this, \"model\", model, false);\r\n        solid(this, \"name\", name);\r\n\r\n        attrs = Object.jet.to(attrs);\r\n        for (const i in attrs) { solid(this, i, attrs[i]); }\r\n\r\n        const entityType = this.entityType;\r\n\r\n        if (!entityType) { throw Error(msg(`missing!`, name, \"entityType\")); }\r\n\r\n        const typeName = unwrap(entityType, model.namespace+\".\");\r\n        if (!typeName) { throw Error(msg(`missing namespace '${ model.namespace }' prefix`, name, \"entityType\")); }\r\n        const props = model.entityTypes[typeName];\r\n        if (!props) { throw Error(msg(`definition missing at 'model.entityTypes.${typeName}'`, name, \"entityType\")); }\r\n\r\n        solid(this, \"props\", props);\r\n\r\n        for (const propName in props) {\r\n            if (!props[propName].key) { continue; }\r\n            if (this.primaryKey) { throw Error(msg(`primaryKey is allready defined as ${this.primaryKey}`, name, propName)); }\r\n            solid(this, \"primaryKey\", propName);\r\n        }\r\n\r\n        if (!this.primaryKey) { throw Error(msg(`primaryKey is missing`, name)); }\r\n\r\n    }\r\n\r\n}", "import jet from \"@randajan/jet-core\";\r\n\r\nconst { cached } = jet.prop;\r\n\r\nconst validateChildDefault = (model, msg, name, child)=>child;\r\n\r\nexport const assignPack = (obj, model, msg, name, childs, validateChild)=>{\r\n    const _p = {};\r\n    const _msg = (text, ...path)=>msg(text, name, ...path);\r\n\r\n    validateChild = validateChild || validateChildDefault;\r\n    childs = Object.jet.to(childs);\r\n    for (let name in childs) {\r\n        const child = childs[name];\r\n        cached(obj, _p, name, _=>validateChild(model, _msg, name, child));\r\n    }\r\n\r\n    return obj;\r\n}\r\n\r\n//filter:props\r\nconst _pull = async (vals, method, context, to)=>{\r\n    const { name, props } = await context.fetchEntity();\r\n    if (typeof vals !== \"object\") { return to; }\r\n    if (typeof to !== \"object\") { to = {}; }\r\n    for (let i in vals) {\r\n        const prop = props[i];\r\n        if (!prop) { continue; }\r\n        if (!prop.key && !await context.filter(name, i)) { continue; }\r\n        const val = prop.convert(vals[i], method, context);\r\n        if (val !== undefined) { to[i] = val; }\r\n    }\r\n    return to;\r\n}\r\n\r\nexport const pullBody = async (vals, method, context, to)=>{\r\n    const toArray = Array.isArray(to);\r\n    vals = (toArray === Array.isArray(vals)) ? vals : toArray ? [vals] : vals[0];\r\n    if (!toArray) { return _pull(vals, method, context, to); }\r\n    for (const raw of vals) {\r\n        const val = await _pull(raw, method, context);\r\n        if (val) { to.push(val); }\r\n    }\r\n    return to;\r\n}", "import jet from \"@randajan/jet-core\";\r\n\r\nimport { parseUrl } from \"../tools\";\r\nimport { Context } from \"./Context\";\r\n\r\nconst { solid } = jet.prop;\r\n\r\nexport class Gateway {\r\n\r\n    constructor(server, url, options={}, extendArgs=[]) {\r\n        const { adapter, filter, extender } = options;\r\n\r\n        solid.all(this, {\r\n            url:parseUrl(url, false),\r\n        });\r\n\r\n        solid.all(this, {\r\n            server,\r\n            fetchContext:async responder=>{\r\n                const context = new Context(this, await server.fetchModel(), responder, adapter, filter);\r\n                if (jet.isRunnable(extender)) { await extender(context, ...extendArgs); }\r\n                return context;\r\n            }\r\n        }, false);\r\n\r\n    }\r\n\r\n    msg(text) {\r\n        return this.server.msg(this.url.pathname + \" \" + text);\r\n    }\r\n\r\n    async resolve(responder) {\r\n        const { server } = this;\r\n        let context;\r\n\r\n        try {\r\n            responder.setHeader('OData-Version', '4.0');\r\n            responder.setHeader('DataServiceVersion', '4.0');\r\n            if (server.cors) { responder.setHeader('Access-Control-Allow-Origin', server.cors); }\r\n\r\n            context = await this.fetchContext(responder);\r\n            return await context.route.resolve(context);\r\n            \r\n        } catch (e) {\r\n\r\n            const error = {\r\n                code: e?.code || 500,\r\n                message: e?.msg || e?.message || \"Unknown error\",\r\n                stack: e?.stack,\r\n                method: responder.getMethod(),\r\n                target: responder.getURL(),\r\n                details: []\r\n            }\r\n\r\n            responder.setHeader('Content-Type', 'application/json');\r\n            responder.setBody(error.code, JSON.stringify({ error }));\r\n\r\n            server.onError(context, error);\r\n\r\n        }\r\n\r\n    }\r\n\r\n}", "import jet from \"@randajan/jet-core\";\r\n\r\nimport { _fetchOptions } from \"../parsers/options\";\r\nimport { getScope, getScopeMeta, isWrapped, parseUrl, trimUrl, unwrap } from \"../tools\";\r\nimport { pullBody } from \"../parsers/types\";\r\n\r\nconst { solid, cached, safe } = jet.prop;\r\n\r\nexport class Context {\r\n    constructor(gw, model, responder, adapter, filter) {\r\n        const { server } = gw;\r\n\r\n        solid.all(this, {\r\n            server,\r\n            gw,\r\n            model\r\n        });\r\n\r\n        solid.all(this, {\r\n            responder,\r\n            filter:jet.isRunnable(filter) ? (entity, property)=>filter(this, entity, property) : _=>true\r\n        }, false);\r\n\r\n        cached.all(this, {}, {\r\n            url: _ =>{\r\n                const urlReq = responder.getURL();\r\n                const urlBase = trimUrl(gw.url.pathname);\r\n                if (!isWrapped(urlReq, urlBase)) { return {}; }\r\n                return parseUrl(unwrap(urlReq, urlBase), true);\r\n            },\r\n            method: _ => responder.getMethod().toLowerCase(),\r\n            route: _ => server.findRoute(this.method, this.url.pathname),\r\n            params: _ => this.route.parseParams(this.url.pathname)\r\n        });\r\n\r\n        cached.all(this, {}, {\r\n            _entity: async _ =>{\r\n                const { entity } = this.params;\r\n                if (await this.filter(entity)) { return this.model.findEntity(entity); }\r\n                throw { code:403, msg:`Forbidden` };\r\n            },\r\n            _options: async _ => _fetchOptions(this.url, this.params, (await this._entity).primaryKey),\r\n            _requestBodyRaw: async _=>responder.getBody(),\r\n            _responseBodyRaw: async _=>{\r\n                const { action } = this.route;\r\n                if (adapter[action]) { return adapter[action](this); }\r\n                throw { code:501, msg:`Action '${action}' is not implemented` };\r\n            }\r\n        }, false);\r\n    }\r\n\r\n    getScope(ids, quote = \"\") {\r\n        const { gw:{url}, params:{entity} } = this;\r\n        return url + \"/\" + getScope(entity, ids, quote);\r\n    }\r\n\r\n    getScopeMeta(ids, quote = \"\") {\r\n        const { gw:{url}, params:{entity} } = this;\r\n        return url + \"/\" + getScopeMeta(entity, ids, quote);\r\n    }\r\n\r\n    getScopeMetaEntity(ids, quote = \"\") {\r\n        return this.getScopeMeta(ids, quote)+\"/$entity\";\r\n    }\r\n\r\n    async fetchEntity() {\r\n        return this._entity;\r\n    }\r\n\r\n    async fetchOptions() {\r\n        return this._options;\r\n    }\r\n\r\n    async fetchRequestBodyRaw() {\r\n        return this._requestBodyRaw;\r\n    }\r\n\r\n    async fetchResponseBodyRaw() {\r\n        return this._responseBodyRaw;\r\n    }\r\n\r\n    async pullRequestBody(to={}) {\r\n        return pullBody(await this.fetchRequestBodyRaw(), \"toAdapter\", this, to);\r\n    }\r\n\r\n    async pullResponseBody(to={}) {\r\n        return pullBody(await this.fetchResponseBodyRaw(), \"toResponse\", this, to);\r\n    }\r\n\r\n}", "import parser from 'odata-parser';\r\nimport querystring from 'querystring';\r\nimport jet from \"@randajan/jet-core\";\r\n\r\nimport { unwrap } from \"../tools\";\r\nimport { allowedQueryOptions } from '../consts';\r\n\r\n\r\n// odata parser returns ['null', ''] for a filter with \"field eq null\"\r\n// we handle the case by fixing the query in case this happens\r\nconst filterBug = val=>(Array.isArray(val) && val.length === 2 && val[0] === 'null' && val[1] === '') ? null : val;\r\n\r\nconst parseOp = (op, left, right, func, args)=>{\r\n  const r = op || [];\r\n  r.push(parseNode(left, func, args));\r\n  r.push(parseNode(right, func, args));\r\n  return r;\r\n}\r\n\r\nconst parseSort = orderBy => {\r\n  const r = {};\r\n  if (!orderBy) { return r; }\r\n  for (const prop of orderBy) {\r\n    const propName = Object.keys(prop)[0];\r\n    r[propName] = prop[propName] === 'desc' ? -1 : 1;\r\n  }\r\n  return r;\r\n}\r\n\r\nconst parseSelect = select => {\r\n  const r = {};\r\n  if (!select) { return r; }\r\n  for (const prop of select) { r[prop] = 1; }\r\n  return r;\r\n}\r\n\r\nconst parseFilter = filter => {\r\n  if (!filter) { return {}; }\r\n  const { type, left, right, func, args } = filter;\r\n  return parseNode({ type, left, right }, func, args);\r\n}\r\n\r\n\r\nconst substringof = (args, result) => {\r\n\r\n  const prop = args[0].type === 'property' ? args[0] : args[1];\r\n  const lit = args[0].type === 'literal' ? args[0] : args[1];\r\n\r\n  result[prop.name] = new RegExp(lit.value);\r\n}\r\n\r\nconst _pushProp = (result, left, rightValue) => {\r\n  if (left.type !== 'property' || left.name.indexOf('/') === -1) { return result[left.name] = rightValue; }\r\n\r\n  const fragments = left.name.split('/');\r\n  const obj = result[fragments[0]] || {};\r\n\r\n  for (let i = 1; i < fragments.length; i++) {\r\n    if (i === (fragments.length - 1)) {\r\n      obj[fragments[i]] = rightValue\r\n    } else {\r\n      obj[fragments[i]] = obj[fragments[i]] || {}\r\n    }\r\n  }\r\n\r\n  return result[fragments[0]] = obj;\r\n}\r\n\r\nconst parseNode = ({ type, left, right }, func, args) => {\r\n  const result = {};\r\n  const pushProp = rightValue=>_pushProp(result, left, rightValue);\r\n\r\n  if (right.type === \"literal\") {\r\n    if (type === 'eq') { pushProp(filterBug(right.value)); }\r\n    if (type === 'lt') { pushProp({ $lt: right.value }); }\r\n    if (type === 'gt') { pushProp({ $gt: right.value }); }\r\n    if (type === 'le') { pushProp({ $lte: right.value }); }\r\n    if (type === 'ge') { pushProp({ $gte: right.value }); }\r\n    if (type === 'ne') { pushProp({ $ne:filterBug(right.value) }); }\r\n  }\r\n\r\n  if (type === 'and') { result.$and = parseOp(result.$and, left, right, func, args); }\r\n  if (type === 'or') { result.$or = parseOp(result.$or, left, right, func, args); }\r\n  if (type === 'functioncall') {\r\n    switch (func) {\r\n      case 'substringof': substringof(args, result)\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nconst parseQuery = (url) => {\r\n  let search = url.search;\r\n  if (!search) { return; }\r\n\r\n  let query = {};\r\n  for (let k in url.query) {\r\n    if (allowedQueryOptions.includes(k)) { query[k] = url.query[k]; }\r\n  }\r\n\r\n  //workaround v4 => v3\r\n  if (Boolean.jet.to(query.$count)) {\r\n    query[\"$inlinecount\"] = \"allpages\";\r\n\r\n    delete query.$count;\r\n    search = querystring.stringify(query);\r\n\r\n    if (!search) { return; }\r\n  }\r\n\r\n  search = decodeURIComponent((unwrap(search, \"?\") || search).replace(/\\+/g, \" \"));\r\n  \r\n  query = search ? parser.parse(search) : {};\r\n\r\n  if (query.$inlinecount != null) {\r\n    query.$count = true;\r\n    delete query.$inlinecount;\r\n  }\r\n\r\n  if (query.$top) { query.$limit = query.$top; }\r\n\r\n  query.$sort = parseSort(query.$orderby);\r\n  query.$filter = parseFilter(query.$filter);\r\n  query.$select = parseSelect(query.$select);\r\n\r\n  return query;\r\n}\r\n\r\n\r\n\r\nexport const _fetchOptions = (url, params, primaryKey) => {\r\n  const query = parseQuery(url) || { $filter: {} };\r\n\r\n  if (params.count) { query.$count = true; }\r\n  if (params.id) { query.$filter[primaryKey] = params.id; }\r\n\r\n  return query;\r\n}", "import { unwrap } from \"./tools\";\r\n\r\nconst _tsPattern = /^P([0-9]+D)?(T([0-9]+H)?([0-9]+M)?([0-9]+S)?)?$/;\r\nconst _tsList = [\r\n    { unit: \"D\", factor: 86400000, group: \"\", patternIndex: 1 },\r\n    { unit: \"H\", factor: 3600000, group: \"T\", patternIndex: 3 },\r\n    { unit: \"M\", factor: 60000, group: \"T\", patternIndex: 4 },\r\n    { unit: \"S\", factor: 1000, group: \"T\", patternIndex: 5 }\r\n];\r\n\r\nexport const msToTimespan = (milliseconds, quoteLeft = \"duration'\", quoteRight = \"'\") => {\r\n    if (typeof milliseconds !== \"number\" || isNaN(milliseconds) || milliseconds < 0) { return; }\r\n    let rest = milliseconds;\r\n    let duration = \"P\";\r\n    let groupCurrent = \"\";\r\n\r\n    for (const { unit, factor, group } of _tsList) {\r\n        const value = Math.floor(rest / factor);\r\n        rest %= factor;\r\n        if (value <= 0) { continue; }\r\n        if (group !== groupCurrent) { duration += (groupCurrent = group); }\r\n        duration += `${value}${unit}`;\r\n    };\r\n\r\n    return quoteLeft + duration + quoteRight;\r\n};\r\n\r\nexport const timespanToMs = (timespan = \"\", quoteLeft = \"duration'\", quoteRight = \"'\") => {\r\n    const m = unwrap(timespan, quoteLeft, quoteRight).match(_tsPattern);\r\n    if (!m?.length) { return; }\r\n\r\n    let ms = 0;\r\n    for (const { factor, patternIndex } of _tsList) {\r\n        const value = parseInt(m[patternIndex], 10);\r\n        if (!isNaN(value)) { ms += value * factor; }\r\n    };\r\n    return ms;\r\n}\r\n\r\n\r\n// const durationExamples = [\r\n//   null,\r\n//   \"duration'P2DT4H30M'\",\r\n//   \"duration'PT10H15M'\",\r\n//   \"duration'PT45M'\",\r\n//   \"duration'P7DT2H'\",\r\n//   \"duration'PT1H30M20S'\",\r\n//   \"duration'P3D'\",\r\n//   \"duration'PT2M'\",\r\n//   \"duration'P1DT12H45M'\",\r\n//   \"duration'PT5S'\",\r\n//   \"duration'PT8H'\",\r\n//   \"duration'P4DT6H10M'\",\r\n//   \"duration'PT30M'\",\r\n//   \"duration'PT1S'\",\r\n//   \"duration'P2DT23H59M59S'\",\r\n//   \"duration'PT20M'\",\r\n//   \"duration'P1DT1H'\",\r\n//   \"duration'PT15S'\",\r\n//   \"duration'PT2H30M'\",\r\n//   \"duration'P5D'\",\r\n//   \"duration'PT10S'\"\r\n// ];\r\n\r\n// console.log(durationExamples.map(e=>[e, timespanToMs(e), msToTimespan(timespanToMs(e)), msToTimespan(timespanToMs(e)) === e]));", "import { Server } from \"./class/Server.js\";\r\nimport { msToTimespan, timespanToMs } from \"./converters.js\";\r\n\r\nexport default (options)=>new Server(options);\r\n\r\nexport {\r\n    Server,\r\n    timespanToMs,\r\n    msToTimespan\r\n}\r\n", "import { ObjectId } from \"mongodb\";\r\nimport jet from \"@randajan/jet-core\";\r\n\r\nconst { solid } = jet.prop;\r\n\r\nexport class MongoAdapter {\r\n\r\n    constructor(connect) {\r\n        solid(this, \"connect\", connect, false);\r\n    }\r\n\r\n    optValidator(val, fk, pk, key) { return (key === \"_id\") ? ObjectId(val) : val; }\r\n    optValidate(o) { return jet.map(o, this.optValidator.bind(this), true); }\r\n\r\n    async getDB(context) {\r\n        return (await this.connect(context)).db(context.model.namespace);\r\n    }\r\n\r\n    async getCollection(context) {\r\n        return (await this.getDB(context)).collection(context.params.entity);\r\n    }\r\n\r\n    async remove(context) {\r\n        const options = await context.fetchOptions();\r\n        const { $filter } = this.optValidate({ $filter:options.$filter });\r\n\r\n        const col = await this.getCollection(context);\r\n        const res = await col.deleteOne($filter);\r\n    \r\n        return res.deletedCount;\r\n    }\r\n    \r\n    async update(context) {\r\n        const options = await context.fetchOptions();\r\n        const { $filter } = this.optValidate({ $filter:options.$filter });\r\n\r\n        const col = await this.getCollection(context);\r\n        const res = await col.updateOne($filter, {$set:await context.pullRequestBody({})});\r\n    \r\n        return res.matchedCount;\r\n    }\r\n    \r\n    async insert(context) {\r\n        const { primaryKey } = await context.fetchEntity();\r\n        const body = await context.pullRequestBody({});\r\n\r\n        if (primaryKey !== \"_id\" && !body[primaryKey]) { body[primaryKey] = jet.uid(16); }\r\n    \r\n        const col = await this.getCollection(context);\r\n        const value = await col.insertOne(body);\r\n    \r\n        return col.findOne({ _id: value.insertedId });\r\n    }\r\n    \r\n    async query(context) {\r\n        const options = await context.fetchOptions();\r\n        const { $select, $sort, $skip, $limit, $filter } = this.optValidate(options);\r\n\r\n        const col = await this.getCollection(context);\r\n        let qr = col.find($filter, { projection: $select || {} });\r\n    \r\n        if ($sort) { qr = qr.sort($sort); }\r\n        if ($skip) { qr = qr.skip($skip); }\r\n        if ($limit) { qr = qr.limit($limit); }\r\n\r\n        return qr.toArray();\r\n    \r\n    }\r\n\r\n    async count(context) {\r\n        return (await this.query(context)).length;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default connect=>new MongoAdapter(connect);\r\n", "import jet from \"@randajan/jet-core\";\r\n\r\nconst { solid } = jet.prop;\r\n\r\nexport class ExpressResponder {\r\n\r\n    constructor(request, response) {\r\n        solid.all(this, {request, response});\r\n    }\r\n\r\n    getURL() {\r\n        const req = this.request;\r\n        return req.originalUrl || req.url;\r\n    }\r\n\r\n    getMethod() {\r\n        return this.request.method;\r\n    }\r\n\r\n    async getBody() {\r\n        const req = this.request;\r\n\r\n        if (req.body) { return req.body; }\r\n    \r\n        return new Promise((res, rej) => {\r\n            let body = \"\";\r\n            req.on('data', data => {\r\n                if ((body += data).length > 1e6) { rej({ statusCode: 400, msg: \"Request is too long\" }); }\r\n            });\r\n            req.on('end', _ => {\r\n                try { res(body ? JSON.parse(body) : undefined); }\r\n                catch(e) { rej({ statusCode:400, msg:e.message }); }\r\n            });\r\n        });\r\n    }\r\n\r\n    getType() {\r\n        const req = this.request;\r\n        const headers = jet.json.from(req.headers);\r\n        const accept = headers?.accept;\r\n        if (typeof accept !== \"string\") { return; }\r\n        const xml = accept.includes(\"xml\");\r\n        const json = accept.includes(\"json\");\r\n        if (xml !== json) { return xml ? \"xml\" : \"json\"; }\r\n    }\r\n\r\n    setHeader(name, value) {\r\n        this.response.setHeader(name, value);\r\n    }\r\n\r\n    setBody(statusCode, body) {\r\n        const res = this.response;\r\n\r\n        res.statusCode = statusCode;\r\n        res.end(body);\r\n    }\r\n    \r\n}\r\n\r\nexport default (req, res)=>new ExpressResponder(req, res);", "import { info } from \"@randajan/simple-lib/node\";\r\nimport ODataServer from \"../../dist/index.js\";\r\nimport mongoAdapter from \"../../dist/mods/adapter/Mongo.js\";\r\nimport expressResponder from \"../../dist/mods/responder/Express.js\";\r\n\r\nimport { MongoClient } from \"mongodb\";\r\nimport http from \"http\";\r\n\r\n\r\nconst mongo = {\r\n    url:\"mongodb://localhost:27017\",\r\n}\r\n\r\nconst model = {\r\n    namespace: \"main\",\r\n    entityTypes: {\r\n        \"UserType\": {\r\n            \"_id\": {\"type\": \"Edm.String\", key: true},\r\n            \"test\": {\"type\": \"Edm.String\"},            \r\n        }\r\n    },   \r\n    entitySets: {\r\n        \"users\": {\r\n            entityType: \"main.UserType\"\r\n        }\r\n    }\r\n};\r\n\r\nconst getMongo = async context=>{\r\n\r\n    if (!mongo.current) { \r\n        mongo.current = await MongoClient.connect(mongo.url);\r\n        mongo.current.on(\"close\", _=>{ delete mongo.current; });\r\n        process.on(\"exit\", _=>{\r\n            if (mongo.current) { mongo.current.close(); }\r\n        });\r\n    }\r\n    \r\n    return mongo.current;\r\n}\r\n\r\nconst mongoApi = ODataServer({\r\n    model,\r\n    cors:\"*\",\r\n    adapter:mongoAdapter(getMongo),\r\n    // converter:(primitive, value, method, context)=>{\r\n    //     //console.log(primitive, value, method);\r\n    //     console.log(primitive, method, context.test);\r\n    //     return value;\r\n    // },\r\n    filter:async (context, collectionName, propertyName)=>{\r\n        if (context.test === \"test\") { return false; }\r\n        //if (propertyName === \"test\") { return false; }\r\n        //return collectionName !== \"users\";\r\n        return true;\r\n    },\r\n    extender: async (context, test)=>{\r\n\r\n        //console.log(await context.fetchOptions());\r\n        context.test = test;\r\n    }\r\n});\r\n\r\nhttp.createServer(mongoApi.serve(expressResponder, 'http://localhost:1337/odata', \"tesst\")).listen(1337);"],
  "mappings": "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",
  "names": ["log", "jet", "builder", "model", "solid", "cached", "name", "jet", "solid", "jet", "solid"]
}
