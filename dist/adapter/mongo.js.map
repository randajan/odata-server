{
  "version": 3,
  "sources": ["../../src/adapter/mongo.js"],
  "sourcesContent": ["import { ObjectId } from \"mongodb\";\r\nimport jet from \"@randajan/jet-core\";\r\n\r\nconst { solid, cached } = jet.prop;\r\n\r\nconst _convertStringsToObjectIds = obj => jet.map(obj, (val, fullKey, parentKey, key)=>{\r\n    return (key === '_id') ? ObjectId(val) : val;\r\n}, true)\r\n\r\n\r\nconst update = async (collection, { query, data }) => {\r\n    if (data.$set) { delete data.$set._id; } //idk why, it was in source code\r\n\r\n    const res = await collection.updateOne(query, data);\r\n\r\n    if (res.matchedCount !== 1) { throw Error('Update not successful'); }\r\n\r\n    return res.matchedCount;\r\n}\r\n\r\nconst remove = async (collection, { query }) => {\r\n\r\n    const res = await collection.deleteOne(query);\r\n\r\n    if (res.deletedCount !== 1) { throw Error('Remove not successful'); }\r\n\r\n    return res.deletedCount;\r\n\r\n}\r\n\r\nconst insert = async (collection, { data }) => {\r\n\r\n    const value = await collection.insertOne(data);\r\n\r\n    return collection.findOne({ _id: value.insertedId });\r\n\r\n}\r\n\r\nconst query = async (collection, { options }) => {\r\n    const { $select, $sort, $skip, $limit, $count, $inlinecount, $filter } = _convertStringsToObjectIds(options);\r\n\r\n    let qr = collection.find($filter, { projection: $select || {} });\r\n\r\n    if ($sort) { qr = qr.sort($sort); }\r\n    if ($skip) { qr = qr.skip($skip); }\r\n    if ($limit) { qr = qr.limit($limit); }\r\n    if ($count) { return qr.count(); }\r\n\r\n    const value = await qr.toArray();\r\n\r\n    if (!$inlinecount) { return value; }\r\n\r\n    const count = await collection.find($filter).count();\r\n\r\n    return { count, value };\r\n\r\n}\r\n\r\nexport default getDB=>{\r\n    const _actions = { update, remove, query, insert };\r\n    \r\n    return async (actionName, context)=>{\r\n        const action = _actions[actionName];\r\n        if (!action) { throw Error(`Unknown action '${actionName}'`); }\r\n        \r\n        const db = await getDB();\r\n        const collection = db.collection(context.params.collection);\r\n    \r\n        return action(collection, context);\r\n    }\r\n\r\n}\r\n"],
  "mappings": ";AAAA,SAAS,gBAAgB;AACzB,OAAO,SAAS;AAEhB,IAAM,EAAE,OAAO,OAAO,IAAI,IAAI;AAE9B,IAAM,6BAA6B,SAAO,IAAI,IAAI,KAAK,CAAC,KAAK,SAAS,WAAW,QAAM;AACnF,SAAQ,QAAQ,QAAS,SAAS,GAAG,IAAI;AAC7C,GAAG,IAAI;AAGP,IAAM,SAAS,OAAO,YAAY,EAAE,OAAAA,QAAO,KAAK,MAAM;AAClD,MAAI,KAAK,MAAM;AAAE,WAAO,KAAK,KAAK;AAAA,EAAK;AAEvC,QAAM,MAAM,MAAM,WAAW,UAAUA,QAAO,IAAI;AAElD,MAAI,IAAI,iBAAiB,GAAG;AAAE,UAAM,MAAM,uBAAuB;AAAA,EAAG;AAEpE,SAAO,IAAI;AACf;AAEA,IAAM,SAAS,OAAO,YAAY,EAAE,OAAAA,OAAM,MAAM;AAE5C,QAAM,MAAM,MAAM,WAAW,UAAUA,MAAK;AAE5C,MAAI,IAAI,iBAAiB,GAAG;AAAE,UAAM,MAAM,uBAAuB;AAAA,EAAG;AAEpE,SAAO,IAAI;AAEf;AAEA,IAAM,SAAS,OAAO,YAAY,EAAE,KAAK,MAAM;AAE3C,QAAM,QAAQ,MAAM,WAAW,UAAU,IAAI;AAE7C,SAAO,WAAW,QAAQ,EAAE,KAAK,MAAM,WAAW,CAAC;AAEvD;AAEA,IAAM,QAAQ,OAAO,YAAY,EAAE,QAAQ,MAAM;AAC7C,QAAM,EAAE,SAAS,OAAO,OAAO,QAAQ,QAAQ,cAAc,QAAQ,IAAI,2BAA2B,OAAO;AAE3G,MAAI,KAAK,WAAW,KAAK,SAAS,EAAE,YAAY,WAAW,CAAC,EAAE,CAAC;AAE/D,MAAI,OAAO;AAAE,SAAK,GAAG,KAAK,KAAK;AAAA,EAAG;AAClC,MAAI,OAAO;AAAE,SAAK,GAAG,KAAK,KAAK;AAAA,EAAG;AAClC,MAAI,QAAQ;AAAE,SAAK,GAAG,MAAM,MAAM;AAAA,EAAG;AACrC,MAAI,QAAQ;AAAE,WAAO,GAAG,MAAM;AAAA,EAAG;AAEjC,QAAM,QAAQ,MAAM,GAAG,QAAQ;AAE/B,MAAI,CAAC,cAAc;AAAE,WAAO;AAAA,EAAO;AAEnC,QAAM,QAAQ,MAAM,WAAW,KAAK,OAAO,EAAE,MAAM;AAEnD,SAAO,EAAE,OAAO,MAAM;AAE1B;AAEA,IAAO,gBAAQ,WAAO;AAClB,QAAM,WAAW,EAAE,QAAQ,QAAQ,OAAO,OAAO;AAEjD,SAAO,OAAO,YAAY,YAAU;AAChC,UAAM,SAAS,SAAS;AACxB,QAAI,CAAC,QAAQ;AAAE,YAAM,MAAM,mBAAmB,aAAa;AAAA,IAAG;AAE9D,UAAM,KAAK,MAAM,MAAM;AACvB,UAAM,aAAa,GAAG,WAAW,QAAQ,OAAO,UAAU;AAE1D,WAAO,OAAO,YAAY,OAAO;AAAA,EACrC;AAEJ;",
  "names": ["query"]
}
